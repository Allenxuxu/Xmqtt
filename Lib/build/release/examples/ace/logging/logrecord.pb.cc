// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logrecord.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "logrecord.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace logging {

namespace {

const ::google::protobuf::Descriptor* LogRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogRecord_Heartbeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogRecord_Heartbeat_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_logrecord_2eproto() {
  protobuf_AddDesc_logrecord_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "logrecord.proto");
  GOOGLE_CHECK(file != NULL);
  LogRecord_descriptor_ = file->message_type(0);
  static const int LogRecord_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord, heartbeat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord, thread_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord, message_),
  };
  LogRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogRecord_descriptor_,
      LogRecord::default_instance_,
      LogRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogRecord));
  LogRecord_Heartbeat_descriptor_ = LogRecord_descriptor_->nested_type(0);
  static const int LogRecord_Heartbeat_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord_Heartbeat, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord_Heartbeat, process_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord_Heartbeat, process_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord_Heartbeat, process_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord_Heartbeat, username_),
  };
  LogRecord_Heartbeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogRecord_Heartbeat_descriptor_,
      LogRecord_Heartbeat::default_instance_,
      LogRecord_Heartbeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord_Heartbeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecord_Heartbeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogRecord_Heartbeat));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_logrecord_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogRecord_descriptor_, &LogRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogRecord_Heartbeat_descriptor_, &LogRecord_Heartbeat::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_logrecord_2eproto() {
  delete LogRecord::default_instance_;
  delete LogRecord_reflection_;
  delete LogRecord_Heartbeat::default_instance_;
  delete LogRecord_Heartbeat_reflection_;
}

void protobuf_AddDesc_logrecord_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017logrecord.proto\022\007logging\"\371\001\n\tLogRecord"
    "\022/\n\theartbeat\030\001 \001(\0132\034.logging.LogRecord."
    "Heartbeat\022\r\n\005level\030\002 \002(\005\022\021\n\tthread_id\030\003 "
    "\002(\005\022\021\n\ttimestamp\030\004 \002(\003\022\017\n\007message\030\005 \002(\t\032"
    "u\n\tHeartbeat\022\020\n\010hostname\030\001 \002(\t\022\024\n\014proces"
    "s_name\030\002 \002(\t\022\022\n\nprocess_id\030\003 \002(\005\022\032\n\022proc"
    "ess_start_time\030\004 \002(\003\022\020\n\010username\030\005 \002(\t", 278);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "logrecord.proto", &protobuf_RegisterTypes);
  LogRecord::default_instance_ = new LogRecord();
  LogRecord_Heartbeat::default_instance_ = new LogRecord_Heartbeat();
  LogRecord::default_instance_->InitAsDefaultInstance();
  LogRecord_Heartbeat::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_logrecord_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_logrecord_2eproto {
  StaticDescriptorInitializer_logrecord_2eproto() {
    protobuf_AddDesc_logrecord_2eproto();
  }
} static_descriptor_initializer_logrecord_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LogRecord_Heartbeat::kHostnameFieldNumber;
const int LogRecord_Heartbeat::kProcessNameFieldNumber;
const int LogRecord_Heartbeat::kProcessIdFieldNumber;
const int LogRecord_Heartbeat::kProcessStartTimeFieldNumber;
const int LogRecord_Heartbeat::kUsernameFieldNumber;
#endif  // !_MSC_VER

LogRecord_Heartbeat::LogRecord_Heartbeat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:logging.LogRecord.Heartbeat)
}

void LogRecord_Heartbeat::InitAsDefaultInstance() {
}

LogRecord_Heartbeat::LogRecord_Heartbeat(const LogRecord_Heartbeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:logging.LogRecord.Heartbeat)
}

void LogRecord_Heartbeat::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  process_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  process_id_ = 0;
  process_start_time_ = GOOGLE_LONGLONG(0);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogRecord_Heartbeat::~LogRecord_Heartbeat() {
  // @@protoc_insertion_point(destructor:logging.LogRecord.Heartbeat)
  SharedDtor();
}

void LogRecord_Heartbeat::SharedDtor() {
  if (hostname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hostname_;
  }
  if (process_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete process_name_;
  }
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void LogRecord_Heartbeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogRecord_Heartbeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogRecord_Heartbeat_descriptor_;
}

const LogRecord_Heartbeat& LogRecord_Heartbeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logrecord_2eproto();
  return *default_instance_;
}

LogRecord_Heartbeat* LogRecord_Heartbeat::default_instance_ = NULL;

LogRecord_Heartbeat* LogRecord_Heartbeat::New() const {
  return new LogRecord_Heartbeat;
}

void LogRecord_Heartbeat::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hostname_->clear();
      }
    }
    if (has_process_name()) {
      if (process_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        process_name_->clear();
      }
    }
    process_id_ = 0;
    process_start_time_ = GOOGLE_LONGLONG(0);
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogRecord_Heartbeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:logging.LogRecord.Heartbeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string hostname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hostname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_process_name;
        break;
      }

      // required string process_name = 2;
      case 2: {
        if (tag == 18) {
         parse_process_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_process_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->process_name().data(), this->process_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "process_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_process_id;
        break;
      }

      // required int32 process_id = 3;
      case 3: {
        if (tag == 24) {
         parse_process_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &process_id_)));
          set_has_process_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_process_start_time;
        break;
      }

      // required int64 process_start_time = 4;
      case 4: {
        if (tag == 32) {
         parse_process_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &process_start_time_)));
          set_has_process_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_username;
        break;
      }

      // required string username = 5;
      case 5: {
        if (tag == 42) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:logging.LogRecord.Heartbeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:logging.LogRecord.Heartbeat)
  return false;
#undef DO_
}

void LogRecord_Heartbeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:logging.LogRecord.Heartbeat)
  // required string hostname = 1;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hostname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hostname(), output);
  }

  // required string process_name = 2;
  if (has_process_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->process_name().data(), this->process_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "process_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->process_name(), output);
  }

  // required int32 process_id = 3;
  if (has_process_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->process_id(), output);
  }

  // required int64 process_start_time = 4;
  if (has_process_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->process_start_time(), output);
  }

  // required string username = 5;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->username(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:logging.LogRecord.Heartbeat)
}

::google::protobuf::uint8* LogRecord_Heartbeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:logging.LogRecord.Heartbeat)
  // required string hostname = 1;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hostname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hostname(), target);
  }

  // required string process_name = 2;
  if (has_process_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->process_name().data(), this->process_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "process_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->process_name(), target);
  }

  // required int32 process_id = 3;
  if (has_process_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->process_id(), target);
  }

  // required int64 process_start_time = 4;
  if (has_process_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->process_start_time(), target);
  }

  // required string username = 5;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->username(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logging.LogRecord.Heartbeat)
  return target;
}

int LogRecord_Heartbeat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string hostname = 1;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // required string process_name = 2;
    if (has_process_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->process_name());
    }

    // required int32 process_id = 3;
    if (has_process_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->process_id());
    }

    // required int64 process_start_time = 4;
    if (has_process_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->process_start_time());
    }

    // required string username = 5;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogRecord_Heartbeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogRecord_Heartbeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogRecord_Heartbeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogRecord_Heartbeat::MergeFrom(const LogRecord_Heartbeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_process_name()) {
      set_process_name(from.process_name());
    }
    if (from.has_process_id()) {
      set_process_id(from.process_id());
    }
    if (from.has_process_start_time()) {
      set_process_start_time(from.process_start_time());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogRecord_Heartbeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogRecord_Heartbeat::CopyFrom(const LogRecord_Heartbeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogRecord_Heartbeat::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void LogRecord_Heartbeat::Swap(LogRecord_Heartbeat* other) {
  if (other != this) {
    std::swap(hostname_, other->hostname_);
    std::swap(process_name_, other->process_name_);
    std::swap(process_id_, other->process_id_);
    std::swap(process_start_time_, other->process_start_time_);
    std::swap(username_, other->username_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogRecord_Heartbeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogRecord_Heartbeat_descriptor_;
  metadata.reflection = LogRecord_Heartbeat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int LogRecord::kHeartbeatFieldNumber;
const int LogRecord::kLevelFieldNumber;
const int LogRecord::kThreadIdFieldNumber;
const int LogRecord::kTimestampFieldNumber;
const int LogRecord::kMessageFieldNumber;
#endif  // !_MSC_VER

LogRecord::LogRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:logging.LogRecord)
}

void LogRecord::InitAsDefaultInstance() {
  heartbeat_ = const_cast< ::logging::LogRecord_Heartbeat*>(&::logging::LogRecord_Heartbeat::default_instance());
}

LogRecord::LogRecord(const LogRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:logging.LogRecord)
}

void LogRecord::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  heartbeat_ = NULL;
  level_ = 0;
  thread_id_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogRecord::~LogRecord() {
  // @@protoc_insertion_point(destructor:logging.LogRecord)
  SharedDtor();
}

void LogRecord::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
    delete heartbeat_;
  }
}

void LogRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogRecord_descriptor_;
}

const LogRecord& LogRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logrecord_2eproto();
  return *default_instance_;
}

LogRecord* LogRecord::default_instance_ = NULL;

LogRecord* LogRecord::New() const {
  return new LogRecord;
}

void LogRecord::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LogRecord*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(level_, timestamp_);
    if (has_heartbeat()) {
      if (heartbeat_ != NULL) heartbeat_->::logging::LogRecord_Heartbeat::Clear();
    }
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:logging.LogRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .logging.LogRecord.Heartbeat heartbeat = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heartbeat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_thread_id;
        break;
      }

      // required int32 thread_id = 3;
      case 3: {
        if (tag == 24) {
         parse_thread_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thread_id_)));
          set_has_thread_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_timestamp;
        break;
      }

      // required int64 timestamp = 4;
      case 4: {
        if (tag == 32) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_message;
        break;
      }

      // required string message = 5;
      case 5: {
        if (tag == 42) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:logging.LogRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:logging.LogRecord)
  return false;
#undef DO_
}

void LogRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:logging.LogRecord)
  // optional .logging.LogRecord.Heartbeat heartbeat = 1;
  if (has_heartbeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->heartbeat(), output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // required int32 thread_id = 3;
  if (has_thread_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->thread_id(), output);
  }

  // required int64 timestamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->timestamp(), output);
  }

  // required string message = 5;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:logging.LogRecord)
}

::google::protobuf::uint8* LogRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:logging.LogRecord)
  // optional .logging.LogRecord.Heartbeat heartbeat = 1;
  if (has_heartbeat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->heartbeat(), target);
  }

  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // required int32 thread_id = 3;
  if (has_thread_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->thread_id(), target);
  }

  // required int64 timestamp = 4;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->timestamp(), target);
  }

  // required string message = 5;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:logging.LogRecord)
  return target;
}

int LogRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .logging.LogRecord.Heartbeat heartbeat = 1;
    if (has_heartbeat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->heartbeat());
    }

    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 thread_id = 3;
    if (has_thread_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->thread_id());
    }

    // required int64 timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // required string message = 5;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogRecord::MergeFrom(const LogRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heartbeat()) {
      mutable_heartbeat()->::logging::LogRecord_Heartbeat::MergeFrom(from.heartbeat());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_thread_id()) {
      set_thread_id(from.thread_id());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogRecord::CopyFrom(const LogRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;

  if (has_heartbeat()) {
    if (!this->heartbeat().IsInitialized()) return false;
  }
  return true;
}

void LogRecord::Swap(LogRecord* other) {
  if (other != this) {
    std::swap(heartbeat_, other->heartbeat_);
    std::swap(level_, other->level_);
    std::swap(thread_id_, other->thread_id_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogRecord_descriptor_;
  metadata.reflection = LogRecord_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace logging

// @@protoc_insertion_point(global_scope)

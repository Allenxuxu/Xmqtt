// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: resolver.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "resolver.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace resolver {

namespace {

const ::google::protobuf::Descriptor* ResolveRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResolveRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResolveResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResolveResponse_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* ResolverService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_resolver_2eproto() {
  protobuf_AddDesc_resolver_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "resolver.proto");
  GOOGLE_CHECK(file != NULL);
  ResolveRequest_descriptor_ = file->message_type(0);
  static const int ResolveRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolveRequest, address_),
  };
  ResolveRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResolveRequest_descriptor_,
      ResolveRequest::default_instance_,
      ResolveRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolveRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolveRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResolveRequest));
  ResolveResponse_descriptor_ = file->message_type(1);
  static const int ResolveResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolveResponse, resolved_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolveResponse, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolveResponse, port_),
  };
  ResolveResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResolveResponse_descriptor_,
      ResolveResponse::default_instance_,
      ResolveResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolveResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolveResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResolveResponse));
  ResolverService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_resolver_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResolveRequest_descriptor_, &ResolveRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResolveResponse_descriptor_, &ResolveResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_resolver_2eproto() {
  delete ResolveRequest::default_instance_;
  delete ResolveRequest_reflection_;
  delete ResolveResponse::default_instance_;
  delete ResolveResponse_reflection_;
}

void protobuf_AddDesc_resolver_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016resolver.proto\022\010resolver\"!\n\016ResolveReq"
    "uest\022\017\n\007address\030\001 \002(\t\"D\n\017ResolveResponse"
    "\022\027\n\010resolved\030\001 \001(\010:\005false\022\n\n\002ip\030\002 \003(\007\022\014\n"
    "\004port\030\003 \003(\0052Q\n\017ResolverService\022>\n\007Resolv"
    "e\022\030.resolver.ResolveRequest\032\031.resolver.R"
    "esolveResponseB\t\200\001\001\210\001\001\220\001\001", 225);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "resolver.proto", &protobuf_RegisterTypes);
  ResolveRequest::default_instance_ = new ResolveRequest();
  ResolveResponse::default_instance_ = new ResolveResponse();
  ResolveRequest::default_instance_->InitAsDefaultInstance();
  ResolveResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_resolver_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_resolver_2eproto {
  StaticDescriptorInitializer_resolver_2eproto() {
    protobuf_AddDesc_resolver_2eproto();
  }
} static_descriptor_initializer_resolver_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ResolveRequest::kAddressFieldNumber;
#endif  // !_MSC_VER

ResolveRequest::ResolveRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:resolver.ResolveRequest)
}

void ResolveRequest::InitAsDefaultInstance() {
}

ResolveRequest::ResolveRequest(const ResolveRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:resolver.ResolveRequest)
}

void ResolveRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResolveRequest::~ResolveRequest() {
  // @@protoc_insertion_point(destructor:resolver.ResolveRequest)
  SharedDtor();
}

void ResolveRequest::SharedDtor() {
  if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete address_;
  }
  if (this != default_instance_) {
  }
}

void ResolveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResolveRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResolveRequest_descriptor_;
}

const ResolveRequest& ResolveRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_resolver_2eproto();
  return *default_instance_;
}

ResolveRequest* ResolveRequest::default_instance_ = NULL;

ResolveRequest* ResolveRequest::New() const {
  return new ResolveRequest;
}

void ResolveRequest::Clear() {
  if (has_address()) {
    if (address_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      address_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResolveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:resolver.ResolveRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string address = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "address");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:resolver.ResolveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:resolver.ResolveRequest)
  return false;
#undef DO_
}

void ResolveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:resolver.ResolveRequest)
  // required string address = 1;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:resolver.ResolveRequest)
}

::google::protobuf::uint8* ResolveRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:resolver.ResolveRequest)
  // required string address = 1;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:resolver.ResolveRequest)
  return target;
}

int ResolveRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string address = 1;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResolveRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResolveRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResolveRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResolveRequest::MergeFrom(const ResolveRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_address()) {
      set_address(from.address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResolveRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResolveRequest::CopyFrom(const ResolveRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolveRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ResolveRequest::Swap(ResolveRequest* other) {
  if (other != this) {
    std::swap(address_, other->address_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResolveRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResolveRequest_descriptor_;
  metadata.reflection = ResolveRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResolveResponse::kResolvedFieldNumber;
const int ResolveResponse::kIpFieldNumber;
const int ResolveResponse::kPortFieldNumber;
#endif  // !_MSC_VER

ResolveResponse::ResolveResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:resolver.ResolveResponse)
}

void ResolveResponse::InitAsDefaultInstance() {
}

ResolveResponse::ResolveResponse(const ResolveResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:resolver.ResolveResponse)
}

void ResolveResponse::SharedCtor() {
  _cached_size_ = 0;
  resolved_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResolveResponse::~ResolveResponse() {
  // @@protoc_insertion_point(destructor:resolver.ResolveResponse)
  SharedDtor();
}

void ResolveResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResolveResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResolveResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResolveResponse_descriptor_;
}

const ResolveResponse& ResolveResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_resolver_2eproto();
  return *default_instance_;
}

ResolveResponse* ResolveResponse::default_instance_ = NULL;

ResolveResponse* ResolveResponse::New() const {
  return new ResolveResponse;
}

void ResolveResponse::Clear() {
  resolved_ = false;
  ip_.Clear();
  port_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResolveResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:resolver.ResolveResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool resolved = 1 [default = false];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &resolved_)));
          set_has_resolved();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_ip;
        break;
      }

      // repeated fixed32 ip = 2;
      case 2: {
        if (tag == 21) {
         parse_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 21, input, this->mutable_ip())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_ip())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_ip;
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // repeated int32 port = 3;
      case 3: {
        if (tag == 24) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_port())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_port())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_port;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:resolver.ResolveResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:resolver.ResolveResponse)
  return false;
#undef DO_
}

void ResolveResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:resolver.ResolveResponse)
  // optional bool resolved = 1 [default = false];
  if (has_resolved()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->resolved(), output);
  }

  // repeated fixed32 ip = 2;
  for (int i = 0; i < this->ip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      2, this->ip(i), output);
  }

  // repeated int32 port = 3;
  for (int i = 0; i < this->port_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->port(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:resolver.ResolveResponse)
}

::google::protobuf::uint8* ResolveResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:resolver.ResolveResponse)
  // optional bool resolved = 1 [default = false];
  if (has_resolved()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->resolved(), target);
  }

  // repeated fixed32 ip = 2;
  for (int i = 0; i < this->ip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(2, this->ip(i), target);
  }

  // repeated int32 port = 3;
  for (int i = 0; i < this->port_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->port(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:resolver.ResolveResponse)
  return target;
}

int ResolveResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool resolved = 1 [default = false];
    if (has_resolved()) {
      total_size += 1 + 1;
    }

  }
  // repeated fixed32 ip = 2;
  {
    int data_size = 0;
    data_size = 4 * this->ip_size();
    total_size += 1 * this->ip_size() + data_size;
  }

  // repeated int32 port = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->port_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->port(i));
    }
    total_size += 1 * this->port_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResolveResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResolveResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResolveResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResolveResponse::MergeFrom(const ResolveResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  ip_.MergeFrom(from.ip_);
  port_.MergeFrom(from.port_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resolved()) {
      set_resolved(from.resolved());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResolveResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResolveResponse::CopyFrom(const ResolveResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResolveResponse::IsInitialized() const {

  return true;
}

void ResolveResponse::Swap(ResolveResponse* other) {
  if (other != this) {
    std::swap(resolved_, other->resolved_);
    ip_.Swap(&other->ip_);
    port_.Swap(&other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResolveResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResolveResponse_descriptor_;
  metadata.reflection = ResolveResponse_reflection_;
  return metadata;
}


// ===================================================================

ResolverService::~ResolverService() {}

const ::google::protobuf::ServiceDescriptor* ResolverService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResolverService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* ResolverService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResolverService_descriptor_;
}

void ResolverService::Resolve(::google::protobuf::RpcController* controller,
                         const ::resolver::ResolveRequest*,
                         ::resolver::ResolveResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Resolve() not implemented.");
  done->Run();
}

void ResolverService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), ResolverService_descriptor_);
  switch(method->index()) {
    case 0:
      Resolve(controller,
             ::google::protobuf::down_cast<const ::resolver::ResolveRequest*>(request),
             ::google::protobuf::down_cast< ::resolver::ResolveResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& ResolverService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::resolver::ResolveRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& ResolverService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::resolver::ResolveResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

ResolverService_Stub::ResolverService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ResolverService_Stub::ResolverService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
ResolverService_Stub::~ResolverService_Stub() {
  if (owns_channel_) delete channel_;
}

void ResolverService_Stub::Resolve(::google::protobuf::RpcController* controller,
                              const ::resolver::ResolveRequest* request,
                              ::resolver::ResolveResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace resolver

// @@protoc_insertion_point(global_scope)
